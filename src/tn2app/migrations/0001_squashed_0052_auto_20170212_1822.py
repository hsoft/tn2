# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-02-19 18:46
from __future__ import unicode_literals

import ckeditor.fields
import ckeditor_uploader.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.datetime_safe
import django.utils.timezone
import functools
import tn2app.models


class Migration(migrations.Migration):

    replaces = [('tn2app', '0001_initial'), ('tn2app', '0002_auto_20161031_0036'), ('tn2app', '0003_discussion_author'), ('tn2app', '0004_auto_20161107_0212'), ('tn2app', '0005_auto_20161110_0156'), ('tn2app', '0006_auto_20161201_2351'), ('tn2app', '0007_discussion_last_activity'), ('tn2app', '0008_userprofile'), ('tn2app', '0009_auto_20161204_1712'), ('tn2app', '0010_userprofile_avatar'), ('tn2app', '0011_auto_20161207_0247'), ('tn2app', '0012_auto_20161208_0137'), ('tn2app', '0013_auto_20161208_0218'), ('tn2app', '0014_auto_20161209_0233'), ('tn2app', '0015_auto_20161209_0256'), ('tn2app', '0016_articlecategory'), ('tn2app', '0017_article_categories'), ('tn2app', '0018_auto_20161214_0205'), ('tn2app', '0019_auto_20161214_0305'), ('tn2app', '0020_auto_20161216_0219'), ('tn2app', '0021_auto_20161218_0210'), ('tn2app', '0022_auto_20161219_0114'), ('tn2app', '0023_auto_20161219_0131'), ('tn2app', '0024_project_legacy_like_count'), ('tn2app', '0025_auto_20161220_0237'), ('tn2app', '0026_auto_20161222_0231'), ('tn2app', '0027_auto_20161222_1747'), ('tn2app', '0028_discussiongroup_avatar'), ('tn2app', '0029_discussiongroup_group_type'), ('tn2app', '0030_discussiongroup_description_short'), ('tn2app', '0031_article_fulltext_indexes'), ('tn2app', '0032_auto_20161231_0118'), ('tn2app', '0033_project_fulltext_indexes'), ('tn2app', '0034_discussion_fulltext_indexes'), ('tn2app', '0035_auto_20170101_1419'), ('tn2app', '0036_pagecontents'), ('tn2app', '0037_project_featured_time'), ('tn2app', '0038_auto_20170107_0049'), ('tn2app', '0039_projectvote_favorite'), ('tn2app', '0040_auto_20170107_1845'), ('tn2app', '0041_auto_20170107_1850'), ('tn2app', '0042_article_subtitle'), ('tn2app', '0043_article_featured'), ('tn2app', '0044_auto_20170119_0243'), ('tn2app', '0045_discussiongroup_display_order'), ('tn2app', '0046_auto_20170129_2038'), ('tn2app', '0047_auto_20170206_0147'), ('tn2app', '0048_articlecomment'), ('tn2app', '0049_discussioncomment_projectcomment'), ('tn2app', '0051_auto_20170212_0326'), ('tn2app', '0052_auto_20170212_1822')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField()),
                ('main_image', models.ImageField(blank=True, upload_to='')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('creation_time', models.DateTimeField(auto_now_add=True, default=django.utils.datetime_safe.datetime.now)),
                ('publish_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.SmallIntegerField(choices=[(0, 'Brouillon'), (1, 'Révision'), (2, 'Publié')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Discussion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=255)),
                ('title', models.CharField(max_length=255)),
                ('content', ckeditor.fields.RichTextField()),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DiscussionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('private', models.BooleanField(default=False)),
            ],
        ),
        migrations.AddField(
            model_name='discussion',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discussions', to='tn2app.DiscussionGroup'),
        ),
        migrations.AddField(
            model_name='discussion',
            name='author',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='discussion',
            unique_together=set([('group', 'slug')]),
        ),
        migrations.AlterField(
            model_name='discussion',
            name='slug',
            field=models.SlugField(max_length=255),
        ),
        migrations.AlterModelOptions(
            name='discussiongroup',
            options={'permissions': (('access_private_groups', 'Accéder aux groupes privés'),)},
        ),
        migrations.AddField(
            model_name='discussion',
            name='last_activity',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('wpdb_id', models.IntegerField(null=True)),
                ('display_name', models.CharField(blank=True, max_length=60, verbose_name='Pseudo')),
                ('description', ckeditor.fields.RichTextField(blank=True, verbose_name='Qui suis-je?')),
                ('city', models.TextField(blank=True, verbose_name='Ville')),
                ('website', models.URLField(blank=True, verbose_name='Site web')),
                ('skill_level', models.CharField(blank=True, choices=[('Grand débutant', 'Grand débutant'), ('Débutant', 'Débutant'), ('Intermédiaire', 'Intermédiaire'), ('Avancé', 'Avancé'), ('Professionnel', 'Professionnel')], max_length=20, verbose_name='Niveau')),
                ('sewing_machine', models.TextField(blank=True, verbose_name='MAC')),
                ('avatar', models.ImageField(blank=True, upload_to=tn2app.models.get_user_avatar_path, verbose_name='Avatar')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('auth.user',),
            managers=[
                ('objects', tn2app.models.UserManager()),
            ],
        ),
        migrations.AlterField(
            model_name='discussiongroup',
            name='description',
            field=models.TextField(),
        ),
        migrations.AddField(
            model_name='discussion',
            name='is_locked',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='discussion',
            name='is_sticky',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='ArticleCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('featured', models.BooleanField(default=False)),
            ],
        ),
        migrations.AddField(
            model_name='article',
            name='categories',
            field=models.ManyToManyField(to='tn2app.ArticleCategory'),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('pattern_name', models.CharField(blank=True, max_length=250)),
                ('pattern_url', models.URLField(blank=True)),
                ('blog_post_url', models.URLField(blank=True)),
                ('store_url', models.URLField(blank=True)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('image1', models.ImageField(upload_to=functools.partial(tn2app.models.get_project_image_path, *(), **{'slot': 1}))),
                ('image2', models.ImageField(blank=True, upload_to=functools.partial(tn2app.models.get_project_image_path, *(), **{'slot': 2}))),
                ('image3', models.ImageField(blank=True, upload_to=functools.partial(tn2app.models.get_project_image_path, *(), **{'slot': 3}))),
                ('image4', models.ImageField(blank=True, upload_to=functools.partial(tn2app.models.get_project_image_path, *(), **{'slot': 4}))),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tn2app.ProjectCategory'),
        ),
        migrations.AlterField(
            model_name='project',
            name='blog_post_url',
            field=models.URLField(blank=True, max_length=250),
        ),
        migrations.AlterField(
            model_name='project',
            name='pattern_url',
            field=models.URLField(blank=True, max_length=250),
        ),
        migrations.AlterField(
            model_name='project',
            name='store_url',
            field=models.URLField(blank=True, max_length=250),
        ),
        migrations.AlterModelOptions(
            name='project',
            options={'ordering': ['-creation_time']},
        ),
        migrations.AlterField(
            model_name='project',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProjectVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_liked', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tn2app.Project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='likes',
            field=models.ManyToManyField(through='tn2app.ProjectVote', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='projectvote',
            unique_together=set([('user', 'project')]),
        ),
        migrations.AddField(
            model_name='project',
            name='legacy_like_count',
            field=models.PositiveSmallIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='project',
            name='description',
            field=ckeditor.fields.RichTextField(),
        ),
        migrations.AlterField(
            model_name='project',
            name='blog_post_url',
            field=models.URLField(blank=True, max_length=250, verbose_name='Article sur mon blog'),
        ),
        migrations.AlterField(
            model_name='project',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tn2app.ProjectCategory', verbose_name='Catégorie'),
        ),
        migrations.AlterField(
            model_name='project',
            name='image1',
            field=models.ImageField(upload_to=functools.partial(tn2app.models.get_project_image_path, *(), **{'slot': 1}), verbose_name='Photographie principale du projet'),
        ),
        migrations.AlterField(
            model_name='project',
            name='image2',
            field=models.ImageField(blank=True, upload_to=functools.partial(tn2app.models.get_project_image_path, *(), **{'slot': 2}), verbose_name='Photographie alternative 1'),
        ),
        migrations.AlterField(
            model_name='project',
            name='image3',
            field=models.ImageField(blank=True, upload_to=functools.partial(tn2app.models.get_project_image_path, *(), **{'slot': 3}), verbose_name='Photographie alternative 2'),
        ),
        migrations.AlterField(
            model_name='project',
            name='image4',
            field=models.ImageField(blank=True, upload_to=functools.partial(tn2app.models.get_project_image_path, *(), **{'slot': 4}), verbose_name='Photographie alternative 3'),
        ),
        migrations.AlterField(
            model_name='project',
            name='pattern_name',
            field=models.CharField(blank=True, max_length=250, verbose_name='Patron ou tutoriel utilisé'),
        ),
        migrations.AlterField(
            model_name='project',
            name='pattern_url',
            field=models.URLField(blank=True, max_length=250, verbose_name='URL du patron ou tutoriel'),
        ),
        migrations.AlterField(
            model_name='project',
            name='store_url',
            field=models.URLField(blank=True, max_length=250, verbose_name='URL du produit dans votre boutique'),
        ),
        migrations.AlterField(
            model_name='project',
            name='title',
            field=models.CharField(max_length=100, verbose_name='Titre du projet'),
        ),
        migrations.AddField(
            model_name='discussion',
            name='last_poster',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='discussiongroup',
            name='avatar',
            field=models.ImageField(blank=True, upload_to=tn2app.models.get_group_avatar_path, verbose_name='Avatar'),
        ),
        migrations.AddField(
            model_name='discussiongroup',
            name='group_type',
            field=models.SmallIntegerField(choices=[(0, 'Thématique'), (1, 'Géographique'), (2, 'Entraide')], default=0),
        ),
        migrations.AddField(
            model_name='discussiongroup',
            name='description_short',
            field=models.TextField(blank=True),
        ),
        migrations.RunSQL(
            sql="CREATE INDEX tn2app_article_ts1_idx ON tn2app_article USING gin(to_tsvector('french', coalesce(title, '') || ' ' || coalesce(content, '')));",
            reverse_sql='DROP INDEX IF EXISTS tn2app_article_ts1_idx;',
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='wpdb_id',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.RunSQL(
            sql="CREATE INDEX tn2app_project_ts1_idx ON tn2app_project USING gin(to_tsvector('french', coalesce(title, '') || ' ' || coalesce(description, '') || ' ' || coalesce(pattern_name, '')));",
            reverse_sql='DROP INDEX IF EXISTS tn2app_project_ts1_idx;',
        ),
        migrations.RunSQL(
            sql="CREATE INDEX tn2app_discussion_ts1_idx ON tn2app_discussion USING gin(to_tsvector('french', coalesce(title, '') || ' ' || coalesce(content, '')));",
            reverse_sql='DROP INDEX IF EXISTS tn2app_discussion_ts1_idx;',
        ),
        migrations.AlterField(
            model_name='discussiongroup',
            name='private',
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.CreateModel(
            name='PageContents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=30, unique=True)),
                ('contents', ckeditor.fields.RichTextField()),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='featured_time',
            field=models.DateTimeField(null=True),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='display_name',
            field=models.CharField(db_index=True, max_length=60, verbose_name='Pseudo'),
        ),
        migrations.AddField(
            model_name='projectvote',
            name='favorite',
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AlterField(
            model_name='project',
            name='likes',
            field=models.ManyToManyField(related_name='liked_by', through='tn2app.ProjectVote', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='article',
            name='subtitle',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='article',
            name='featured',
            field=models.BooleanField(default=False, verbose_name='À la une'),
        ),
        migrations.AlterField(
            model_name='projectvote',
            name='date_liked',
            field=models.DateTimeField(auto_now_add=True, db_index=True),
        ),
        migrations.AddField(
            model_name='discussiongroup',
            name='display_order',
            field=models.SmallIntegerField(db_index=True, default=0),
        ),
        migrations.AlterField(
            model_name='discussion',
            name='content',
            field=ckeditor.fields.RichTextField(verbose_name='Message'),
        ),
        migrations.AlterField(
            model_name='discussion',
            name='title',
            field=models.CharField(max_length=255, verbose_name='Titre'),
        ),
        migrations.AlterField(
            model_name='discussion',
            name='creation_time',
            field=models.DateTimeField(auto_now_add=True, db_index=True),
        ),
        migrations.AlterField(
            model_name='discussion',
            name='is_locked',
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AlterField(
            model_name='discussion',
            name='is_sticky',
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AlterField(
            model_name='discussion',
            name='last_activity',
            field=models.DateTimeField(auto_now_add=True, db_index=True),
        ),
        migrations.CreateModel(
            name='ArticleComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submit_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('comment', models.TextField(max_length=10000)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='tn2app.Article')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'ordering': ('submit_date',),
            },
        ),
        migrations.CreateModel(
            name='DiscussionComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submit_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('comment', models.TextField(max_length=10000)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='tn2app.Discussion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'ordering': ('submit_date',),
            },
        ),
        migrations.CreateModel(
            name='ProjectComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submit_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('comment', models.TextField(max_length=10000)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='tn2app.Project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'ordering': ('submit_date',),
            },
        ),
        migrations.AlterField(
            model_name='project',
            name='likes',
            field=models.ManyToManyField(related_name='liked_projects', through='tn2app.ProjectVote', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='description_for_articles',
            field=models.TextField(blank=True, verbose_name='Description Rédacteur'),
        ),
        migrations.AlterField(
            model_name='article',
            name='main_image',
            field=models.ImageField(blank=True, upload_to='articles'),
        ),
    ]
